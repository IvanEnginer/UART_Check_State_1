
GccApplication165.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000077e  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000597  00000000  00000000  00000aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003af  00000000  00000000  00001051  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001400  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000408  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f1  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000019c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <main>
  74:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z10usart_initj>:
#include <util/delay.h>
#include <avr/sfr_defs.h>

void usart_init(unsigned int speed)
{
	UBRRH=(unsigned char)(speed>>8);
  7c:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char) speed;
  7e:	89 b9       	out	0x09, r24	; 9
	UCSRA=0x00;
  80:	1b b8       	out	0x0b, r1	; 11
	UCSRB|=(1<<RXEN)|(1<<TXEN);
  82:	8a b1       	in	r24, 0x0a	; 10
  84:	88 61       	ori	r24, 0x18	; 24
  86:	8a b9       	out	0x0a, r24	; 10
	UCSRB|=(1<<RXCIE);
  88:	57 9a       	sbi	0x0a, 7	; 10
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
  8e:	08 95       	ret

00000090 <_Z14CheckBaseStatev>:
bool _ISR_State = false;
bool _ISR_NEW_State = false;

void CheckBaseState(void)
{
	if (Base)
  90:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Base>
  94:	88 23       	and	r24, r24
  96:	21 f0       	breq	.+8      	; 0xa0 <_Z14CheckBaseStatev+0x10>
	{
		PORTB |= (1<<PB2);
  98:	c2 9a       	sbi	0x18, 2	; 24
		UDR = 'B';
  9a:	82 e4       	ldi	r24, 0x42	; 66
  9c:	8c b9       	out	0x0c, r24	; 12
  9e:	08 95       	ret
	}
	else
	{
		PORTB &= ~(1<<PB2);
  a0:	c2 98       	cbi	0x18, 2	; 24
		UDR = 'b';
  a2:	82 e6       	ldi	r24, 0x62	; 98
  a4:	8c b9       	out	0x0c, r24	; 12
  a6:	08 95       	ret

000000a8 <_Z12ChekVccStatev>:
	}
}
void ChekVccState(void)
{
	if(Vcc)
  a8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Vcc>
  ac:	88 23       	and	r24, r24
  ae:	19 f0       	breq	.+6      	; 0xb6 <_Z12ChekVccStatev+0xe>
	{
		PORTA |= (1<<PA0);
  b0:	d8 9a       	sbi	0x1b, 0	; 27
		PORTB |= (1<<PB0);
  b2:	c0 9a       	sbi	0x18, 0	; 24
  b4:	08 95       	ret
	}
	else
	{
		PORTA &= ~(1<<PA0);
  b6:	d8 98       	cbi	0x1b, 0	; 27
		PORTB &= ~(1<<PB0);
  b8:	c0 98       	cbi	0x18, 0	; 24
  ba:	08 95       	ret

000000bc <_Z13ChekCollectorv>:
	}
}

void ChekCollector(void)
{
        if (Base & Vcc)
  bc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Vcc>
  c0:	88 23       	and	r24, r24
  c2:	59 f0       	breq	.+22     	; 0xda <_Z13ChekCollectorv+0x1e>
  c4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Base>
  c8:	88 23       	and	r24, r24
  ca:	39 f0       	breq	.+14     	; 0xda <_Z13ChekCollectorv+0x1e>
        {
            Collector = true;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Collector>
            PORTB |= (1<<PB3);
  d2:	c3 9a       	sbi	0x18, 3	; 24
            UDR = 'C';
  d4:	83 e4       	ldi	r24, 0x43	; 67
  d6:	8c b9       	out	0x0c, r24	; 12
  d8:	08 95       	ret
        } 
        else
        {
            Collector = false;
  da:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Collector>
            PORTB &= ~(1<<PB3);
  de:	c3 98       	cbi	0x18, 3	; 24
            UDR = 'c';
  e0:	83 e6       	ldi	r24, 0x63	; 99
  e2:	8c b9       	out	0x0c, r24	; 12
  e4:	08 95       	ret

000000e6 <__vector_13>:
        }
}

ISR(USART_RXC_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	5f 93       	push	r21
  f8:	6f 93       	push	r22
  fa:	7f 93       	push	r23
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
    Data = UDR;
 108:	8c b1       	in	r24, 0x0c	; 12
 10a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Data>
    switch(Data)
 10e:	86 35       	cpi	r24, 0x56	; 86
 110:	41 f1       	breq	.+80     	; 0x162 <__vector_13+0x7c>
 112:	28 f4       	brcc	.+10     	; 0x11e <__vector_13+0x38>
 114:	82 34       	cpi	r24, 0x42	; 66
 116:	51 f0       	breq	.+20     	; 0x12c <__vector_13+0x46>
 118:	83 34       	cpi	r24, 0x43	; 67
 11a:	b9 f0       	breq	.+46     	; 0x14a <__vector_13+0x64>
 11c:	30 c0       	rjmp	.+96     	; 0x17e <__vector_13+0x98>
 11e:	83 36       	cpi	r24, 0x63	; 99
 120:	d1 f0       	breq	.+52     	; 0x156 <__vector_13+0x70>
 122:	86 37       	cpi	r24, 0x76	; 118
 124:	31 f1       	breq	.+76     	; 0x172 <__vector_13+0x8c>
 126:	82 36       	cpi	r24, 0x62	; 98
 128:	51 f5       	brne	.+84     	; 0x17e <__vector_13+0x98>
 12a:	08 c0       	rjmp	.+16     	; 0x13c <__vector_13+0x56>
    {
        case 'B':
            Base = true;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Base>
            CheckBaseState();
 132:	0e 94 48 00 	call	0x90	; 0x90 <_Z14CheckBaseStatev>
            ChekCollector();
 136:	0e 94 5e 00 	call	0xbc	; 0xbc <_Z13ChekCollectorv>
            break;
 13a:	21 c0       	rjmp	.+66     	; 0x17e <__vector_13+0x98>
        case 'b':
            Base = false;
 13c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Base>
            CheckBaseState();
 140:	0e 94 48 00 	call	0x90	; 0x90 <_Z14CheckBaseStatev>
            ChekCollector();
 144:	0e 94 5e 00 	call	0xbc	; 0xbc <_Z13ChekCollectorv>
            break;
 148:	1a c0       	rjmp	.+52     	; 0x17e <__vector_13+0x98>
        case 'C':
            Collector = true;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Collector>
            _ISR_COLLECTOR = true;
 150:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ISR_COLLECTOR>
            break;
 154:	14 c0       	rjmp	.+40     	; 0x17e <__vector_13+0x98>
        case 'c':
            Collector = false;
 156:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Collector>
            _ISR_COLLECTOR = true;
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ISR_COLLECTOR>
            break;
 160:	0e c0       	rjmp	.+28     	; 0x17e <__vector_13+0x98>
        case 'V':
            Vcc = true;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Vcc>
            ChekVccState();
 168:	0e 94 54 00 	call	0xa8	; 0xa8 <_Z12ChekVccStatev>
            ChekCollector();
 16c:	0e 94 5e 00 	call	0xbc	; 0xbc <_Z13ChekCollectorv>
            break;
 170:	06 c0       	rjmp	.+12     	; 0x17e <__vector_13+0x98>
        case 'v':
            Vcc = false;
 172:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Vcc>
            ChekVccState();
 176:	0e 94 54 00 	call	0xa8	; 0xa8 <_Z12ChekVccStatev>
            ChekCollector();
 17a:	0e 94 5e 00 	call	0xbc	; 0xbc <_Z13ChekCollectorv>
            break; 
    }   
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <_Z9ChekVccInv>:

void ChekVccIn(void)
{
        if(bit_is_set(PINC, PINC0))
 1a0:	98 9b       	sbis	0x13, 0	; 19
 1a2:	05 c0       	rjmp	.+10     	; 0x1ae <_Z9ChekVccInv+0xe>
        {
	        NewState = true;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <NewState>
	        StateVcc = true;
 1aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
        }
        if(bit_is_clear(PINC, PINC0))
 1ae:	98 99       	sbic	0x13, 0	; 19
 1b0:	09 c0       	rjmp	.+18     	; 0x1c4 <_Z9ChekVccInv+0x24>
        {
	        NewState = false;
 1b2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <NewState>
	        StateVcc = false;
 1b6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
        }
        if(NewState != State)
 1ba:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <State>
 1be:	18 16       	cp	r1, r24
 1c0:	79 f4       	brne	.+30     	; 0x1e0 <_Z9ChekVccInv+0x40>
 1c2:	08 95       	ret
 1c4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <NewState>
 1c8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <State>
 1cc:	98 17       	cp	r25, r24
 1ce:	79 f0       	breq	.+30     	; 0x1ee <_Z9ChekVccInv+0x4e>
        {
	        if (StateVcc)
 1d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1d4:	88 23       	and	r24, r24
 1d6:	21 f0       	breq	.+8      	; 0x1e0 <_Z9ChekVccInv+0x40>
	        {
		        UDR = 'V';
 1d8:	86 e5       	ldi	r24, 0x56	; 86
 1da:	8c b9       	out	0x0c, r24	; 12
		        PORTB |= (1<<PB1);
 1dc:	c1 9a       	sbi	0x18, 1	; 24
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <_Z9ChekVccInv+0x46>
	        }
	        else
	        {
		        UDR = 'v';
 1e0:	86 e7       	ldi	r24, 0x76	; 118
 1e2:	8c b9       	out	0x0c, r24	; 12
		        PORTB &= ~(1<<PB1);
 1e4:	c1 98       	cbi	0x18, 1	; 24
	        }
	        State = NewState;        
 1e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <NewState>
 1ea:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State>
 1ee:	08 95       	ret

000001f0 <main>:
        }
}

int main(void)
{
	DDRA = 0xFF; 
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	8a bb       	out	0x1a, r24	; 26
    DDRB = 0xFF;
 1f4:	87 bb       	out	0x17, r24	; 23
    DDRC = 0x00;
 1f6:	14 ba       	out	0x14, r1	; 20
    
	usart_init(UBRR_VAL);
 1f8:	83 e3       	ldi	r24, 0x33	; 51
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z10usart_initj>
	sei();
 200:	78 94       	sei
	
	while (1)
	{
        ChekVccIn();
 202:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z9ChekVccInv>
	        }
	        State = NewState;        
        }
}

int main(void)
 206:	fd cf       	rjmp	.-6      	; 0x202 <main+0x12>

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
